#!/bin/sh

# import functions
source ./functions
if [ $? -ne 0 ]; then
    echo "Error: can't source functions, execute the script from $(dirname "$(realpath "$0")")"
    exit 1
fi

# argument parsing #
export VERBOSE_FLAGS="/dev/null"
export FLAGS=" --noconfirm "
export DEVELOPER_MODE=" -- "
while getopts svewh ARGS; do
    case $ARGS in
    s)  
        export VERBOSE_FLAGS="/dev/null"
        export FLAGS=" --noconfirm "
        export DEVELOPER_MODE=" -- "
        ;;
    v)  
        export VERBOSE_FLAGS="$CURRENT_PTS" 
        export FLAGS=" --noconfirm "
        export DEVELOPER_MODE=" -- "
        ;;
    e)
        export VERBOSE_FLAGS="$CURRENT_PTS" 
        export FLAGS="  "
        export DEVELOPER_MODE=" -x "
        ;;
    w)
        export IGNORE_NETWORK="true"
        ;;
    h)
        show_help 0
        ;;
    *)  
        show_help 1
        ;;
    esac
done

# set -x for ./install -e, e.g debug mode
set $DEVELOPER_MODE

# Get Packages using imported functions from `packages.yaml`
BASE_PACKAGES=$(get_yaml_packages packages.yaml base_packages)
MINIMAL_PACKAGES=$(get_yaml_packages packages.yaml minimal_packages)
EXTENDED_PACKAGES=$(get_yaml_packages packages.yaml extended_packages)
GAMING_PACKAGES=$(get_yaml_packages packages.yaml gaming_packages)
SDDM_PACKAGES=$(get_yaml_packages packages.yaml sddm_packages)
OPTIONAL_PACKAGES_RUST=$(get_yaml_packages packages.yaml optional_packages_rust)
TTY_PACKAGES=$(get_yaml_packages packages.yaml tty_packages)

# check for wifi and configure pacman + get options
check_wifi
if [ $? -ne 0 ]; then
    echo -e "[${RED}fail${RESET}] Internet connection required, please connect to a network!"
    exit 1
fi

echo -e "[${BLUE}ok${RESET}] Found internet connection" 
configure_pacman # Add some better defaults to pacman
fix_groups # Add current user to input group (for waybar input module)

source ./install_get_options # Source all variables for user configuration
./install_aur_helper # Install AUR Helper ($OVERRIDE_AUR used here)

# Fix wrong symlinks because they depend on the username
./install_fix_symlinks

# Remove desktop entry if you want
if [[ $FLAG_REMOVE_GENERIC == "y" || $FLAG_REMOVE_GENERIC == "Y" || $FLAG_REMOVE_GENERIC == "" || $FLAG_REMOVE_QT == "y" || $FLAG_REMOVE_QT == "Y" || $FLAG_REMOVE_QT == ""  || $FLAG_REMOVE_ROFI == "y" || $FLAG_REMOVE_ROFI == "Y" || $FLAG_REMOVE_ROFI == "" ]]; then
    ./install_de_debloat # Removes chosen desktop entries
fi

### These are functions used in the script, 
# See the bottom of the file for the call into `stage_1`
enable_sddm_quest() {
    if [[ $SDDM_INSTALL == "y" || $SDDM_INSTALL == "Y" || $SDDM_INSTALL == "" || $SDDM_CUSTOM_INSTALL == "y" || $SDDM_CUSTOM_INSTALL == "Y" || $SDDM_CUSTOM_INSTALL == "" ]]; then

        echo -e "\n${WHITE_BOLD}Do you want to enable sddm now? (y/n)${RESET}"
        read -n1 -rep "$: " SDDM_ENABLE

        if [[ $SDDM_ENABLE == "y" || $SDDM_ENABLE == "Y" || $SDDM_ENABLE == "" ]]; then
            echo -e "[${BLUE}ok${RESET}] Enabled sddm successfully"
            sudo systemctl enable sddm.service
            sudo systemctl start sddm.service
        else
            echo -e "[${PURPLE}info${RESET}] Skipping enabling of sddm.service"
            echo -e "[${PURPLE}info${RESET}] You can enable sddm manually with:"
            echo -e "[${PURPLE}info${RESET}] 'sudo systemctl enable sddm.service'"
        fi
    else 
        echo -e "[${PURPLE}info${RESET}] Skipping enabling of sddm.service"
    fi 
}

install_sddm() {
    if [[ $SDDM_INSTALL == "y" || $SDDM_INSTALL == "Y" || $SDDM_INSTALL == "" ]]; then
        echo -e "[${PURPLE}info${RESET}] Installing sddm packages"
        for PACKAGE in ${SDDM_PACKAGES[@]}; do
            install_packages $PACKAGE yay
        done

        if [[ $SDDM_CUSTOM_INSTALL == "y" || $SDDM_CUSTOM_INSTALL == "Y" || $SDDM_CUSTOM_INSTALL == "" ]]; then
            install_custom_sddm
        else 
            echo -e "[${PURPLE}info${RESET}] Skipping custom sddm theme"
        fi
    else
        echo -e "[${PURPLE}info${RESET}] Skipping sddm packages"
    fi
}

stage_1() {
    echo -e "[${PURPLE}info${RESET}] Executing Stage 1"

    echo -e "[${PURPLE}info${RESET}] Installing base packages"
    for PACKAGE in ${BASE_PACKAGES[@]}; do
        install_packages $PACKAGE yay
    done

    echo -e "[${PURPLE}info${RESET}] Copying configs..."
    ./install_configs
    set_hypr_modkey $MODKEY # change to user preferred modkey

    echo -e "[${PURPLE}info${RESET}] Starting Services..."
    start_services
    install_sddm

    if [[ $INSTALL_TTY == "y" || $INSTALL_TTY == "Y" || $INSTALL_TTY == "" || $INSTALL_TTY == "y" || $INSTALL_TTY == "Y" || $INSTALL_TTY == "" ]]; then
        for PACKAGE in ${TTY_PACKAGES[@]}; do
            install_packages $PACKAGE yay
        done
        
        set_tty_font
    fi

    if [[ $OPTIONAL_DEPS_RUST == "y" || $OPTIONAL_DEPS_RUST == "Y" || $OPTIONAL_DEPS_RUST == "" || $OPTIONAL_DEPS_RUST == "y" || $OPTIONAL_DEPS_RUST == "Y" || $OPTIONAL_DEPS_RUST == "" ]]; then
        for PACKAGE in ${OPTIONAL_PACKAGES_RUST[@]}; do
            install_packages $PACKAGE yay
        done
    fi

    echo -e "[${PURPLE}info${RESET}] Trying to switch stage..."
    if [ $STAGE -gt 1 ]; then 
        echo -e "[${PURPLE}info${RESET}] Entering stage 2"
        stage_2
    else 
        echo -e "[${BLUE}ok${RESET}] Stage-${STAGE} installation finished!"
        enable_sddm_quest
    fi
}

stage_2() {
    echo -e "Executing Stage 2"

    echo -e "[${PURPLE}info${RESET}] Installing minimal packages"
    for PACKAGE in ${MINIMAL_PACKAGES[@]}; do
        install_packages $PACKAGE yay
    done
   
    echo -e "[${PURPLE}info${RESET}] Trying to switch stage..."
    if [ $STAGE -gt 2 ]; then 
        echo -e "[${PURPLE}info${RESET}] Entering stage 3"
        stage_3
    else 
        echo -e "[${BLUE}ok${RESET}] Stage-${STAGE} installation finished!"
        enable_sddm_quest
    fi
}

stage_3() {
    echo -e "[${PURPLE}info${RESET}] Executing Stage 3"

    echo -e "[${PURPLE}info${RESET}] Installing extended packages..."
    for PACKAGE in ${EXTENDED_PACKAGES[@]}; do
        install_packages $PACKAGE yay
    done

    echo -e "[${PURPLE}info${RESET}] Trying to switch stage..."
    if [ $STAGE -gt 3 ]; then 
        echo -e "[${PURPLE}info${RESET}] Entering stage 4"
        stage_4
    else 
        echo -e "[${BLUE}ok${RESET}] Stage-${STAGE} installation finished!"
        enable_sddm_quest
    fi
}

stage_4() {
    echo -e "[${PURPLE}info${RESET}] Executing Stage 4"

    echo -e "[${PURPLE}info${RESET}] Installing gaming packages"
    for PACKAGE in ${GAMING_PACKAGES[@]}; do
        install_packages $PACKAGE yay
    done

    echo -e "Stage-${STAGE} installation finished!"
    enable_sddm_quest
}

stage_1

# Detect nvidia and install drivers
if detect_nvidia; then
    echo -e "[${PURPLE}info${RESET}] Found an nvidia card installing dkms to package list..."
    ./install_nvidia
    install_packages nvidia-dkms pacman
else
    echo -e "[${PURPLE}info${RESET}] No nvidia card detected skipping dkms..."
fi

# Extract gtk themes and fonts into correct directories
./install_archives

# Ask to reboot
echo -e "[${BLUE}ok${RESET}] Installation finished, please reboot to apply all changes" 
echo -e "\n${WHITE_BOLD}Do you want to reboot now? (y/n)${RESET}"
read -n1 -rep "$: " REBOOT_FLAG

if [[ $REBOOT_FLAG == "y" || $REBOOT_FLAG == "Y" || $REBOOT_FLAG == "" ]]; then
    systemctl reboot
fi
