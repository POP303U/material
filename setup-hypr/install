#!/bin/sh

# this is extremly bad
# sooooo much bloat
BASE_PACKAGES=(
"hyprland"
"kitty" 
"waybar"
"swaylock-effects"
"wofi"
"wlogout"
"thunar"
"wl-clipboard"
"wlr-randr"
"jq"
"hyprpicker"
"cliphist"
"wofi-emoji"
"ttf-jetbrains-mono-nerd"
"ttf-cascadia-code-nerd"
"pavucontrol"
"noto-fonts-emoji"
"polkit-gnome"
"python-requests"
"swww"
"swappy"
"grim"
"slurp"
"gvfs"
"nwg-look"
"pamixer"
"pokemon-colorscripts-git"
"bluez"
"bluez-utils"
"networkmanager"
"network-manager-applet"
"rose-pine-gtk-theme-full"
"bibata-cursor-theme-bin"
"xdg-desktop-portal-hyprland"
)

MINIMAL_PACKAGES=(
"p7zip" 
"unrar"
"tar"
"rsync"
"github-cli"
"git"
"fzf"
"exfat-utils"
"fuse-exfat"
"ntfs-3g"
"xfsprogs"
"xfsdump"
"flac"
"jasper"
"aria2"
"less"
"neofetch"
"htop"
"btop"
"curl"
"wget"
"jp2a"
"pfetch"
"helix"
"neovim"
)

EXTENDED_PACKAGES=(
"brave-bin"
"emacs"
"vencord-desktop-bin"
"thunar"
"filezilla"
"libreoffice-fresh"
)

GAMING_PACKAGES=(
"steam"
"wine"
"wine-mono"
"wine-gecko"
"vinegar"
"bottles"
"lutris"
)

SDDM_PACKAGES=(
"sddm"
"qt5-quickcontrols2"
"qt5-graphicaleffects"
"qt5-svg"
)

BLUE='\033[1;34m'
RED='\033[1;31m'
CYAN='\033[01;36m'
YELLOW='\033[01;33m'
WHITE_BOLD="\033[1;38;5;15m"
GREEN="\033[01;32m"
RESET='\033[0m'
PURPLE='\033[01;35m'
WHITE='\033[01;37m'

install_yay() {
    YAY_EXISTS=/sbin/yay

    # initialize [multilib] if not enables
    echo -e "[${PURPLE}info${RESET}] Enabling multilib"
    sudo sed -i '/#\[multilib\]/,/#Include = \/etc\/pacman\.d\/mirrorlist/c\[multilib]\nInclude = /etc/pacman.d/mirrorlist' /etc/pacman.conf
    echo -e "[${PURPLE}info${RESET}] Syncing multilib repositories"
    sudo pacman -Syy --noconfirm >/dev/null 2>&1

    if [ -f "$YAY_EXISTS" ]; then
        AUR_HELPER=yay
        echo -e "[${PURPLE}info${RESET}] Yay was detected, using yay..."
    else
        echo -e "[${PURPLE}info${RESET}] Performing full system sync"
        sudo pacman -Syu >/dev/null 2>&1 

        # install yay
        sudo pacman -S --needed base-devel --noconfirm >/dev/null 2>&1

        git clone https://aur.archlinux.org/yay.git >/dev/null 2>&1
        echo -e "[${BLUE}ok${RESET}] Cloned yay from the AUR"

        cd yay
        echo -e "[${PURPLE}info${RESET}] Installing yay..."
        makepkg -si --noconfirm && echo -e "[${BLUE}ok${RESET}] Building yay from the AUR"

        echo -e "[${PURPLE}info${RESET}] Removing temporary files..."
        cd ..
        rm -rf yay

        AUR_HELPER=yay
    fi
}

fix_groups() {
    sudo usermod -aG input $USER
}

start_wireless() {
    # Start the bluetooth service
    echo -e "[${PURPLE}info${RESET}] Starting the Bluetooth Service..."
    sudo systemctl enable --now bluetooth.service >/dev/null 2>&1

    sleep 2

    ### Disable wifi powersave mode ###
    echo -e "[${PURPLE}info${RESET}] Disabling wifi powersave..." 

    LOC="/etc/NetworkManager/conf.d/wifi-powersave.conf"
    echo -e "[${PURPLE}info${RESET}] The following has been added to $LOC.\n"
    echo -e "[connection]\nwifi.powersave = 2\n" | sudo tee -a $LOC

    echo -e "[${PURPLE}info${RESET}] Restarting NetworkManager service..."
    sudo systemctl restart NetworkManager
    echo -e "[${PURPLE}info${RESET}] Waiting for Internet to reconnect..."
    sleep 5
}

copy_config() {
    echo -e "[${PURPLE}info${RESET}] Copying configs..."

    rm -rf ../configs_backup
    mkdir ../configs_backup # create backup dir

    for CONFIG in ../configs/.config/*; do
        CONFIG_NAME=$(basename "$CONFIG")
    	cp -r ~/.config/$CONFIG_NAME ../configs_backup # backup important

        if [ ! -f "$CONFIG" ]; then
            if cp -r "$CONFIG" ~/.config; then
                echo -e "[${BLUE}ok${RESET}] Copied $CONFIG_NAME to ~/.config/$CONFIG_NAME"
            else
                echo -e "[${RED}fail${RESET}] Copied $CONFIG_NAME to ~/.config/$CONFIG_NAME"
            fi	
        fi
    done

    rm -rf ~/.tmux.conf;          cp -r    ../configs/.tmux.conf            ~ &&         echo -e "[${BLUE}ok${RESET}] Copied tmux to ~/.tmux.conf"
    rm -rf ~/.bashrc;             cp -r    ../configs/.bashrc               ~ &&         echo -e "[${BLUE}ok${RESET}] Copied bashrc to ~/.bashrc"
    rm -rf ~/.gtkrc-2.0;          cp -r    ../configs/.gtkrc-2.0            ~ &&         echo -e "[${BLUE}ok${RESET}] Copied gtkrc-2.0 to ~/.gtkrc-2.0"
    rm -rf ~/.icons;              cp -r    ../configs/.icons                ~ &&         echo -e "[${BLUE}ok${RESET}] Copied .icons to ~/.icons"
    rm -rf ~/.bin;              cp -r    ../configs/.bin ~ &&         echo -e "[${BLUE}ok${RESET}] Copied .icons to ~/.icons"

    # Set some files as exacutable 
    chmod +x ~/.config/hypr/xdg-portal-hyprland && echo -e "[${BLUE}ok${RESET}] '~/.config/hypr/xdg-portal-hyprland' is executable: .wxr-xr-x "
    chmod +x ~/.config/swww/scripts/init_wallpaper && echo -e "[${BLUE}ok${RESET}] '~/config/swww/scripts/init_wallpaper' is executable: .wxr-xr-x "
    chmod +x ~/.config/swww/scripts/change_wallpaper && echo -e "[${BLUE}ok${RESET}] '~/.config/swww/scripts/change_wallpaper' is executable: .wxr-xr-x "
    chmod +x ~/.config/waybar/scripts/waybar-wttr.py && echo -e "[${BLUE}ok${RESET}] '~/.config/waybar/scripts/waybar-wttr.py' is executable: .wxr-xr-x "

    # Clean out other portals
    echo -e "[${PURPLE}info${RESET}] Cleaning out conflicting xdg portals..."
    $AUR_HELPER -R --noconfirm xdg-desktop-portal-gnome xdg-desktop-portal-gtk >/dev/null 2>&1
}

install_doas() {
    echo -e "[${PURPLE}info${RESET}] Installing opendoas..."
    sudo pacman -S opendoas --noconfirm
    sudo chown -c root:root /etc/doas.conf
    sudo chmod -c 0400 /etc/doas.conf
    sudo rm -f /etc/doas.conf
    echo "permit :wheel 
    permit nopass '$(whoami)'
    " | sudo tee -a /etc/doas.conf
    echo -e "[${BLUE}ok${RESET}] Successfully installed opendoas..."
}

enable_sddm_quest() {
    if [[ $SDDM_INSTALL == "y" || $SDDM_INSTALL == "Y" || $SDDM_INSTALL == "" || $SDDM_CUSTOM_INSTALL == "y" || $SDDM_CUSTOM_INSTALL == "Y" || $SDDM_CUSTOM_INSTALL == "" ]]; then

        echo -e "\n${WHITE_BOLD}Do you want to enable sddm now? (y/n)${RESET}"
        read -n1 -rep "$: " SDDM_ENABLE

        if [[ $SDDM_ENABLE == "y" || $SDDM_ENABLE == "Y" || $SDDM_ENABLE == "" ]]; then
            echo -e "[${BLUE}ok${RESET}] Enabled sddm successfully"
            sudo systemctl enable sddm.service
            sudo systemctl start sddm.service
        else
            echo -e "[${PURPLE}info${RESET}] Skipping enabling of sddm.service"
            echo -e "[${PURPLE}info${RESET}] You can enable sddm manually with:"
            echo -e "[${PURPLE}info${RESET}] 'sudo systemctl enable sddm.service'"
        fi
    else 
        echo -e "[${PURPLE}info${RESET}] Skipping enabling of sddm.service"
    fi 
}

install_wofi_wallpaper_git() {
    git clone https://github.com/POP303U/wofi-wallpaper ~/wofi/wofi-wall >/dev/null 2>&1
    chmod +x ~/wofi/wofi-wall/wofi-wallpaper >/dev/null 2>&1
    sudo cp ~/wofi/wofi-wall/wofi-wallpaper /bin
}

install_wofi_rice_selector_git() {
    git clone https://github.com/POP303U/wofi-rice-selector ~/wofi/wofi-rice >/dev/null 2>&1
    chmod +x ~/wofi/wofi-rice/wofi-rice-selector >/dev/null 2>&1
    sudo cp ~/wofi/wofi-rice/wofi-rice-selector /bin
}

cleanup() {
    rm -rf ~/wofi
}

install_sddm() {
    if [[ $SDDM_INSTALL == "y" || $SDDM_INSTALL == "Y" || $SDDM_INSTALL == "" ]]; then
        echo -e "[${PURPLE}info${RESET}] Installing sddm packages"
        for PACKAGE in "${SDDM_PACKAGES[@]}"; do
            if $AUR_HELPER -S --noconfirm "$PACKAGE" --noconfirm >/dev/null 2>&1; then
                echo -e "[${BLUE}ok${RESET}] $PACKAGE installed successfully"
            else
                echo -e "[${RED}fail${RESET}] $PACKAGE installation failed"
            fi
        done

        if [[ $SDDM_CUSTOM_INSTALL == "y" || $SDDM_CUSTOM_INSTALL == "Y" || $SDDM_CUSTOM_INSTALL == "" ]]; then
            git clone https://github.com/POP303U/rose-pine-sddm.git ~/rose-pine-sddm >/dev/null 2>&1
            sudo mv ~/rose-pine-sddm /usr/share/sddm/themes/
            sudo cp /usr/lib/sddm/sddm.conf.d/default.conf /etc/sddm.conf
            sudo sed -i 's/\(Current=\).*/\1rose-pine-sddm/' /etc/sddm.conf
            echo -e "[${BLUE}ok${RESET}] Installed custom RosÃ©-Pine sddm theme"
        else 
            echo -e "[${PURPLE}info${RESET}] Skipping custom sddm theme"
        fi
    else
        echo -e "[${PURPLE}info${RESET}] Skipping sddm packages"
    fi
}

stage_1() {
    echo -e "[${PURPLE}info${RESET}] Executing Stage 1"

    echo -e "[${PURPLE}info${RESET}] Installing base packages"
    for PACKAGE in "${BASE_PACKAGES[@]}"; do
        if $AUR_HELPER -S --noconfirm "$PACKAGE" --noconfirm >/dev/null 2>&1; then
            echo -e "[${BLUE}ok${RESET}] $PACKAGE installed successfully"
        else
            echo -e "[${RED}fail${RESET}] $PACKAGE installation failed"
        fi
    done

    echo -e "[${PURPLE}info${RESET}] Copying config files..."
    copy_config 
    start_wireless
    fix_groups
    install_sddm
    install_wofi_wallpaper_git 
    install_wofi_rice_selector_git
    cleanup

    echo -e "[${PURPLE}info${RESET}] Trying to switch stage..."
    if [ $STAGE -gt 1 ]; then 
        echo -e "[${PURPLE}info${RESET}] Entering stage 2"
        stage_2
    else 
        echo -e "[${BLUE}ok${RESET}] Stage-${STAGE} installation finished!"
        enable_sddm_quest
    fi
}

stage_2() {
    echo -e "Executing Stage 2"

    echo -e "[${PURPLE}info${RESET}] Installing minimal packages"
    for PACKAGE in "${MINIMAL_PACKAGES[@]}"; do
        if $AUR_HELPER -S --noconfirm "$PACKAGE" --noconfirm >/dev/null 2>&1; then
            echo -e "[${BLUE}ok${RESET}] $PACKAGE installed successfully"
        else
            echo -e "[${RED}fail${RESET}] $PACKAGE installation failed"
        fi
    done
   
    echo -e "[${PURPLE}info${RESET}] Trying to switch stage..."
    if [ $STAGE -gt 2 ]; then 
        echo -e "[${PURPLE}info${RESET}] Entering stage 3"
        stage_3
    else 
        echo -e "[${BLUE}ok${RESET}] Stage-${STAGE} installation finished!"
        enable_sddm_quest
    fi
}

stage_3() {
    echo -e "[${PURPLE}info${RESET}] Executing Stage 3"

    echo -e "[${PURPLE}info${RESET}]Installing extended packages..."
    for PACKAGE in "${EXTENDED_PACKAGES[@]}"; do
        if $AUR_HELPER -S --noconfirm "$PACKAGE" --noconfirm >/dev/null 2>&1; then
            echo -e "[${BLUE}ok${RESET}] $PACKAGE installed successfully"
        else
            echo -e "[${RED}fail${RESET}] $PACKAGE installation failed"
        fi
    done
    echo -e "[${PURPLE}info${RESET}] Trying to switch stage..."
    if [ $STAGE -gt 3 ]; then 
        echo -e "[${PURPLE}info${RESET}] Entering stage 4"
        stage_4
    else 
        echo -e "[${BLUE}ok${RESET}] Stage-${STAGE} installation finished!"
        enable_sddm_quest
    fi
}

stage_4() {
    echo -e "[${PURPLE}info${RESET}] Executing Stage 4"

    echo -e "[${PURPLE}info${RESET}] Installing gaming packages"
     for PACKAGE in "${GAMING_PACKAGES[@]}"; do
        if $AUR_HELPER -S --noconfirm "$PACKAGE" --noconfirm >/dev/null 2>&1; then
            echo -e "[${BLUE}ok${RESET}] $PACKAGE installed successfully"
        else
            echo -e "[${RED}fail${RESET}] $PACKAGE installation failed"
        fi
    done   
    echo -e "Stage-${STAGE} installation finished!"
    enable_sddm_quest
}

echo -e "
${GREEN}    __  __                 __                __
${GREEN}   / / / /_  ______  _____/ /___ _____  ____/ /
${GREEN}  / /_/ / / / / __ \/ ___/ / __ '/ __ \/ __  / 
${GREEN} / __  / /_/ / /_/ / /  / / /_/ / / / / /_/ /  
${GREEN}/_/ /_/\__, / .___/_/  /_/\__,_/_/ /_/\__,_/   
${GREEN}      /____/_/                                 ${RESET}

# ${YELLOW}Easy Hyprland installer${RESET} #

${WHITE_BOLD}Tip: See installed packages at the top of the script${RESET}
${CYAN}1${RESET}. Base 
${CYAN}2${RESET}. Minimal
${CYAN}3${RESET}. Extended
${CYAN}4${RESET}. Gaming
"
read -n1 -rep "$: " STAGE

echo -e "\n${WHITE_BOLD}Install sddm? (y/n)${RESET}"
read -n1 -rep "$: " SDDM_INSTALL

if [[ $SDDM_INSTALL == "y" || $SDDM_INSTALL == "Y" || $SDDM_INSTALL == "" ]]; then
    echo -e "${WHITE_BOLD}\nInstall custom RosÃ©-Pine sddm? (y/n) [https://github.com/POP303U/rose-pine-sddm]${RESET}"
    read -n1 -rep "$: " SDDM_CUSTOM_INSTALL
fi

if [[ $STAGE -lt 1 || $STAGE -gt 4 ]]; then 
    echo -e "${RED}Choose a valid option${RESET}"
else 
    install_yay 
    stage_1
fi
