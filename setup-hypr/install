#!/bin/sh

# Check if we are running in bash 
#if [[ $(sh -c 'ps -p $$ -o ppid=' | xargs ps -o comm= -p) != "bash" ]]; then
#    echo "Error: not running in a bash shell, please run $(command -v bash) before running this script"
#    exit 1
#fi

# import functions
source ./functions
if [ $? -ne 0 ]; then
    echo "Error: can't source functions, execute the script from $(dirname "$(realpath "$0")")"
    exit 1
fi

# argument parsing #
export DEVELOPER_MODE=" -- "
while getopts ewh ARGS; do
    case $ARGS in
    e)
        export DEVELOPER_MODE=" -x "
        ;;
    w)
        export IGNORE_NETWORK="true"
        ;;
    h)
        show_help 0
        ;;
    *)  
        show_help 1
        ;;
    esac
done

# set -x for ./install -e, e.g debug mode
set $DEVELOPER_MODE

# check for wifi and configure pacman + get options
check_wifi
if [ $? -ne 0 ]; then
    echo -e "[${RED}fail${RESET}] Internet connection required, please connect to a network!"
    exit 1
fi
echo -e "[${BLUE}ok${RESET}] Found internet connection" 

# Source all variables for user configuration
source ./install_get_options

# Get Packages using imported functions from `packages.yaml`
PACKAGES=($(get_yaml_packages packages.yaml base_packages))

# Construct the user packages defined into one variable called $PACKAGES
[ $STAGE -gt 1 ] && PACKAGES+=($(get_yaml_packages packages.yaml minimal_packages))
[ $STAGE -gt 2 ] && PACKAGES+=($(get_yaml_packages packages.yaml extended_packages))
[ $STAGE -gt 3 ] && PACKAGES+=($(get_yaml_packages packages.yaml gaming_packages))
if [[ $SDDM_INSTALL == "y" || $SDDM_INSTALL == "Y" || $SDDM_INSTALL == "" ]]; then
    PACKAGES+=($(get_yaml_packages packages.yaml sddm_packages))
fi
if [[ $INSTALL_TTY == "y" || $INSTALL_TTY == "Y" || $INSTALL_TTY == "" ]]; then
    PACKAGES+=($(get_yaml_packages packages.yaml tty_packages))
fi
if [[ $OPTIONAL_DEPS_RUST == "y" || $OPTIONAL_DEPS_RUST == "Y" || $OPTIONAL_DEPS_RUST == "" ]]; then
    PACKAGES+=($(get_yaml_packages packages.yaml optional_packages_rust))
fi

# Install AUR Helper ($OVERRIDE_AUR used here)
./install_aur_helper

# Add some better defaults to pacman (then install packages)
configure_pacman 

### Main installation for the packages ###
for PACKAGE in ${PACKAGES[@]}; do
    echo -e "[${PURPLE}info${RESET}] Installing packages"
    install_packages $PACKAGE $AUR_HELPER
done
echo -e "[${BLUE}ok${RESET}] Installed all packages"

### Detect nvidia and install drivers
if detect_nvidia; then
    echo -e "[${PURPLE}info${RESET}] Found an nvidia card installing dkms to package list..."
    ./install_nvidia
    install_packages nvidia-dkms pacman
else
    echo -e "[${PURPLE}info${RESET}] No nvidia card detected skipping dkms..."
fi

# Add current user to input group (for waybar input module)
echo -e "[${PURPLE}info${RESET}] Setting user permissions..."
fix_groups

# Fix wrong symlinks because they depend on the username
echo -e "[${PURPLE}info${RESET}] Fixing symlinks..."
./install_fix_symlinks

# Remove desktop entry if you want
echo -e "[${PURPLE}info${RESET}] Debloating desktop entries..."
./install_de_debloat $FLAG_REMOVE_GENERIC $FLAG_REMOVE_QT $FLAG_REMOVE_ROFI # Removes chosen desktop entries

# Install configs
echo -e "[${PURPLE}info${RESET}] Installing configs..."
./install_configs

# Change to user preferred modkey
echo -e "[${PURPLE}info${RESET}] Changing to user preferred modifier key..."
set_hypr_modkey $MODKEY 

# Start all services
echo -e "[${PURPLE}info${RESET}] Starting Services..."
start_services

# Extract gtk themes and fonts into correct directories
echo -e "[${PURPLE}info${RESET}] Installing themes/icons/cursors..."
./install_archives

# Fixes for old versions of Material
echo -e "[${PURPLE}info${RESET}] Testing compatibility on old versions..."
./install_compat

# Set tty font if installed
if [[ $INSTALL_TTY == "y" || $INSTALL_TTY == "Y" || $INSTALL_TTY == "" ]] && set_tty_font

### Check if sddm is installed
if [[ $SDDM_INSTALL == "y" || $SDDM_INSTALL == "Y" || $SDDM_INSTALL == "" ]]; then
    echo -e "[${GREEN}action${RESET}] Do you want to enable sddm now? (y/n)${RESET}"
    read -n1 -rep "$: " SDDM_ENABLE

    if [[ $SDDM_ENABLE == "y" || $SDDM_ENABLE == "Y" || $SDDM_ENABLE == "" ]]; then
        echo -e "[${BLUE}ok${RESET}] Enabled sddm successfully"
        sudo systemctl enable sddm.service
    else
        echo -e "[${PURPLE}info${RESET}] Skipping enabling of sddm.service"
        echo -e "[${PURPLE}info${RESET}] You can enable sddm manually with:"
        echo -e "[${PURPLE}info${RESET}] 'sudo systemctl enable sddm.service'"
    fi
else 
    echo -e "[${PURPLE}info${RESET}] Skipping enabling of sddm.service"
fi 

# Ask to reboot
echo -e "[${GREEN}action${RESET}] Installation finished, please reboot to apply all changes (y/n)${RESET}"
echo -e "${WHITE_BOLD}Do you want to reboot now? (y/n)${RESET}"
read -n1 -rep "$: " REBOOT_FLAG

# Reboot if you choose to (you should)
if [[ $REBOOT_FLAG == "y" || $REBOOT_FLAG == "Y" || $REBOOT_FLAG == "" ]]; then
    systemctl reboot
fi
