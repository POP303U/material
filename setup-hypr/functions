#!/bin/bash

## Define colors to be used in the script
export BLUE='\033[1;34m'
export RED='\033[1;31m'
export CYAN='\033[01;36m'
export YELLOW='\033[01;33m'
export WHITE_BOLD="\033[1;38;5;15m"
export GREEN="\033[01;32m"
export RESET='\033[0m'
export PURPLE='\033[01;35m'
export WHITE='\033[01;37m'

# Check for AUR helpers
export AUR_HELPERS=(yay paru pikaur pakku pacaur trizen aura aurman)

# Usage: get_yaml_packages "your_yaml_file.yaml" "base_packages"
# Description: Returns package names from yaml block
get_yaml_packages() {
    local YAML_FILE="$1"
    local BLOCK="$2"

    # Set FLAG to 0 initially
    local FLAG=0

    # Read the YAML file LINE by LINE
    while IFS= read -r _LINE; do
        LINE="$(echo $_LINE)" # remove spaces from line
        # Start capturing lines after the specified BLOCK
        if [[ $LINE == "$BLOCK:" ]]; then
            FLAG=1
            continue
        fi

        # If FLAG is set, print the LINE and check for the end of BLOCK
        if [ $FLAG -eq 1 ]; then
            # Check for the end of the BLOCK
            if [[ $LINE == *":"* ]]; then
                break
            fi

            # Skip empty lines and lines starting with --
            if [[ ! $LINE =~ ^\s*$ && ! $LINE =~ ^\s*-- ]]; then
                echo "$LINE" | xargs | sed '/^--/d' # Delete lines containing -- at the start
            fi
        fi
    done < "$YAML_FILE"
}

# Usage: set_hypr_modkey
# Description: Modifies the hyprland.conf $mod based on $1 (MOD4/MOD1)
set_hypr_modkey() {
    local MODKEY=$1
    
    sed -i 's|$mod.*|$mod = '$MODKEY' # written by material installer|' $HOME/.config/hypr/hyprland.conf
}

# Usage: package_installed "package_name" 
# Description: Return 0 if package is installed 1 otherwise
package_installed() {
    local PACKAGE=$1

    if pacman -Qi "$PACKAGE" &> /dev/null; then
        return 0
    else
        return 1
    fi
}

show_help() {
    local EXIT_CODE=$1
    echo "-h: Show this help message"
    echo "-w: Ignore all network checks"
    echo "-e: Developer mode, dumps all bash code into stdout. Not for users"
    exit $EXIT_CODE
}

check_installed() {
    ARRAY="$1"
    local INPUT_LIST=("${@:2}")
    for PACKAGE in "${INPUT_LIST[@]}"; do
        if package_installed "${PACKAGE}"; then
            printf -v "${ARRAY}" "%s" "${PACKAGE}"
            export "${ARRAY}"
            return 0
        fi
    done
    return 1
}

# Usage: install_packages "bash_array" "aur_helper"
# Description: Installs packages provided in an bash array
install_packages() {
    local PACKAGES="$1"
    local AUR_HELPER="$2"

    for PACKAGE in "${PACKAGES[@]}"; do
        # check if package is installed and skip it if it is
        package_installed "$PACKAGE"
        if [ $? -eq 0 ]; then
            continue
        fi

        if $AUR_HELPER -S --noconfirm "$PACKAGE"; then
            echo -e "[${BLUE}ok${RESET}] $PACKAGE installed successfully"
        else
            echo -e "[${RED}fail${RESET}] $PACKAGE installation failed"
        fi
    done
}

# Usage: fix_groups
# Description: Adds the user to the input group
fix_groups() {
    sudo usermod -aG input $USER
}

# Usage: set_tty_font
# Description: Sets the tty font to ter-v28b in /etc/vconsole.conf
set_tty_font() {
    echo -e "[${PURPLE}info${RESET}] The following has been added to /etc/vconsole.conf"
    echo -e '\nFONT=ter-v28b\n' | sudo tee -a /etc/vconsole.conf
}

# Usage: configure_pacman 
# Description: Gives pacman better defaults, and enables multilib
configure_pacman() {
    if [ -f /etc/pacman.conf ] && [ ! -f /etc/pacman.conf.bak ]; then
        # Make the pacman defaults better
        sudo cp /etc/pacman.conf /etc/pacman.conf.bak
        sudo sed -i "/^#Color/c\Color\nILoveCandy
        /^#VerbosePkgLists/c\VerbosePkgLists
        /^#ParallelDownloads/c\ParallelDownloads = 5" /etc/pacman.conf
        echo -e "[${PURPLE}info${RESET}] Improving default pacman configuration"

        # initialize [multilib] if not enabled
        echo -e "[${PURPLE}info${RESET}] Enabling multilib"
        sudo sed -i '/#\[multilib\]/,/#Include = \/etc\/pacman\.d\/mirrorlist/c\[multilib]\nInclude = /etc/pacman.d/mirrorlist' /etc/pacman.conf
        echo -e "[${PURPLE}info${RESET}] Syncing multilib repositories"

        sudo pacman -Fy --noconfirm
    else
        echo -e "[${PURPLE}info${RESET}] Enabling multilib"
    fi
}

# Usage: start_services
# Description: Starts the bluetooth and NetworkManager services
start_services() {
    # Start the bluetooth service
    sudo systemctl enable --now bluetooth.service 
    sleep 2

    ### Disable wifi powersave mode ###
    echo -e "[${PURPLE}info${RESET}] Disabling wifi powersave..." 

    LOC="/etc/NetworkManager/conf.d/wifi-powersave.conf"
    echo -e "[${PURPLE}info${RESET}] The following has been added to $LOC.\n"
    echo -e "[connection]\nwifi.powersave = 2\n" | sudo tee -a $LOC

    echo -e "[${PURPLE}info${RESET}] Restarting NetworkManager service..."
    sudo systemctl restart NetworkManager
    echo -e "[${PURPLE}info${RESET}] Waiting for Internet to reconnect..."
    sleep 5
}

# Usage: check_wifi
# Description: Checks if internet is available returns exit code of 1 if not found, 0 if found
check_wifi() {
    # use the -w flag to ignore wifi checks
    if [ ! -z $IGNORE_NETWORK ]; then
        return 0
    fi

    # check for internet
    if ping -c1 x.org; then
        return 0
    else 
        return 1
    fi
}

# Usage: extract_tar_gz "filepath"
# Description: Extracts an tar.gz file 
extract_tar_gz() {
    local FILE=$1
    tar -xzf $FILE
}

# Usage: detect_nvidia
# Description: Detects if nvidia cards are present in the system, return 0 if one is found else 1
detect_nvidia()
{
    GPU=$(lspci -k | grep -A 0 -E "(VGA|3D)" | awk -F 'controller: ' '{print $2}')
    if [ $(lspci -k | grep -A 2 -E "(VGA|3D)" | grep -i nvidia | wc -l) -gt 0 ]; then
        return 0
    else
        return 1
    fi
}

# Usage: copy_config
# Description: Pulls rose-pine-sddm from my github, applies patches
install_custom_sddm() {
    # use sed for modifying the theme
    sudo sed -i 's|Current=.*|Current=rose-pine-sddm|' /etc/sddm.conf
    sudo sed -i 's|CursorSize=.*|CursorSize=24|' /etc/sddm.conf
    sudo sed -i 's|CursorTheme=.*|CursorTheme=Bibata-Modern-Ice|' /etc/sddm.conf
    echo -e "[${BLUE}ok${RESET}] Installed custom adaptive sddm theme"
}
