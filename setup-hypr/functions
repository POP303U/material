#!/bin/bash

## Define colors to be used in the script
BLUE='\033[1;34m'
RED='\033[1;31m'
CYAN='\033[01;36m'
YELLOW='\033[01;33m'
WHITE_BOLD="\033[1;38;5;15m"
GREEN="\033[01;32m"
RESET='\033[0m'
PURPLE='\033[01;35m'
WHITE='\033[01;37m'

# Usage: get_yaml_packages "your_yaml_file.yaml" "base_packages"
# Description: Returns package names from yaml block
get_yaml_packages() {
    local YAML_FILE="$1"
    local BLOCK="$2"

    # Set FLAG to 0 initially
    local FLAG=0

    # Read the YAML file LINE by LINE
    while IFS= read -r _LINE; do
        LINE="$(echo $_LINE | xargs)" # remove spaces from line
        # Start capturing lines after the specified BLOCK
        if [[ $LINE == "$BLOCK:" ]]; then
            FLAG=1
            continue
        fi

        # If FLAG is set, print the LINE and check for the end of BLOCK
        if [ $FLAG -eq 1 ]; then
            # Check for the end of the BLOCK
            if [[ $LINE == *":"* ]]; then
                break
            fi

            # Skip empty lines and lines starting with --
            if [[ ! $LINE =~ ^\s*$ && ! $LINE =~ ^\s*-- ]]; then
                echo "$LINE" | xargs | sed '/^--/d' # Delete lines containing -- at the start
            fi
        fi
    done < "$YAML_FILE"
}

# Usage: install_packages "bash_array" "aur_helper"
# Description: Installs packages provided in an bash array
install_packages() {
    local PACKAGES="$1"
    local AUR_HELPER="$2"

    for PACKAGE in "${PACKAGES[@]}"; do
        if $AUR_HELPER -S --noconfirm "$PACKAGE" --noconfirm >/dev/null 2>&1; then
            echo -e "[${BLUE}ok${RESET}] $PACKAGE installed successfully"
        else
            echo -e "[${RED}fail${RESET}] $PACKAGE installation failed"
        fi
    done
}

# Usage: fix_groups
# Description: Adds the user to the input group
fix_groups() {
    sudo usermod -aG input $USER
}

# Usage: set_tty_font
# Description: Sets the tty font to ter-v28b in /etc/vconsole.conf
set_tty_font() {
    echo -e "[${PURPLE}info${RESET}] The following has been added to /etc/vconsole.conf"
    echo -e '\nFONT=ter-v28b\n' | sudo tee -a /etc/vconsole.conf
}

# Usage: install_yay
# Description: Installs yay through git
install_yay() {
    YAY_EXISTS=/sbin/yay

    if [ -f "$YAY_EXISTS" ]; then
        AUR_HELPER=yay
        echo -e "[${PURPLE}info${RESET}] Yay was detected, using yay..."
    else
        echo -e "[${PURPLE}info${RESET}] Performing full system sync"
        sudo pacman -Syu >/dev/null 2>&1 

        # install yay
        sudo pacman -S --needed base-devel --noconfirm >/dev/null 2>&1

        git clone https://aur.archlinux.org/yay.git >/dev/null 2>&1
        echo -e "[${BLUE}ok${RESET}] Cloned yay from the AUR"

        cd yay
        echo -e "[${PURPLE}info${RESET}] Installing yay..."
        makepkg -si --noconfirm && echo -e "[${BLUE}ok${RESET}] Building yay from the AUR"

        echo -e "[${PURPLE}info${RESET}] Removing temporary files..."
        cd ..
        rm -rf yay

        AUR_HELPER=yay
    fi
}

# Usage: configure_pacman 
# Description: Gives pacman better defaults, and enables multilib
configure_pacman() {
    if [ -f /etc/pacman.conf ] && [ ! -f /etc/pacman.conf.bak ]; then
        # Make the pacman defaults better
        sudo cp /etc/pacman.conf /etc/pacman.conf.bak
        sudo sed -i "/^#Color/c\Color\nILoveCandy
        /^#VerbosePkgLists/c\VerbosePkgLists
        /^#ParallelDownloads/c\ParallelDownloads = 5" /etc/pacman.conf
        echo -e "[${PURPLE}info${RESET}] Improving default pacman configuration"

        # initialize [multilib] if not enabled
        echo -e "[${PURPLE}info${RESET}] Enabling multilib"
        sudo sed -i '/#\[multilib\]/,/#Include = \/etc\/pacman\.d\/mirrorlist/c\[multilib]\nInclude = /etc/pacman.d/mirrorlist' /etc/pacman.conf
        echo -e "[${PURPLE}info${RESET}] Syncing multilib repositories"

        sudo pacman -Fy --noconfirm >/dev/null 2>&1
    else
        echo -e "[${PURPLE}info${RESET}] Enabling multilib"
    fi
}

# Usage: start_services
# Description: Starts the bluetooth and NetworkManager services
start_services() {
    # Start the bluetooth service
    sudo systemctl enable --now bluetooth.service >/dev/null 2>&1
    sleep 2

    ### Disable wifi powersave mode ###
    echo -e "[${PURPLE}info${RESET}] Disabling wifi powersave..." 

    LOC="/etc/NetworkManager/conf.d/wifi-powersave.conf"
    echo -e "[${PURPLE}info${RESET}] The following has been added to $LOC.\n"
    echo -e "[connection]\nwifi.powersave = 2\n" | sudo tee -a $LOC

    echo -e "[${PURPLE}info${RESET}] Restarting NetworkManager service..."
    sudo systemctl restart NetworkManager
    echo -e "[${PURPLE}info${RESET}] Waiting for Internet to reconnect..."
    sleep 5
}

# Usage: check_wifi
# Description: Checks if internet is available returns exit code of 1 if not found, 0 if found
check_wifi() {
    # check for internet
    if ping -w 1 x.org >/dev/null 2>&1; then
        return 0
    else 
        return 1
    fi
}

# Usage: copy_config
# Description: Copies config to your users home folder and sets all permissions + symlinks
copy_config() {
    # Fixing colors with wofi by symlinking to pywal path
    RICE_CURRENT=$(awk '/rice-current/ {print $NF}' ../configs/.config/material/config)
    mkdir $HOME/.cache/wal
    ln -sf $HOME/.config/wofi/themes/$RICE_CURRENT $HOME/.cache/wal/colors 

    echo -e "[${PURPLE}info${RESET}] Copying configs..."

    rm -rf ../configs_backup
    mkdir ../configs_backup # create backup dir

    for CONFIG in ../configs/.config/*; do
        CONFIG_NAME=$(basename "$CONFIG")
    	cp -r ~/.config/$CONFIG_NAME ../configs_backup # backup important

        if [ ! -f "$CONFIG" ]; then
            if cp -r "$CONFIG" ~/.config; then
                echo -e "[${BLUE}ok${RESET}] Copied $CONFIG_NAME to ~/.config/$CONFIG_NAME"
            else
                echo -e "[${RED}fail${RESET}] Copied $CONFIG_NAME to ~/.config/$CONFIG_NAME"
            fi	
        fi
    done

    rm -rf ~/.tmux.conf;           cp -r    ../configs/.tmux.conf            ~ &&         echo -e "[${BLUE}ok${RESET}] Copied tmux to ~/.tmux.conf"
    rm -rf ~/.bashrc;              cp -r    ../configs/.bashrc               ~ &&         echo -e "[${BLUE}ok${RESET}] Copied bashrc to ~/.bashrc"
    rm -rf ~/.gtkrc-2.0;           cp -r    ../configs/.gtkrc-2.0            ~ &&         echo -e "[${BLUE}ok${RESET}] Copied gtkrc-2.0 to ~/.gtkrc-2.0"
    rm -rf ~/.themes;              cp -r    ../configs/.themes               ~ &&         echo -e "[${BLUE}ok${RESET}] Copied .themes to ~/.themes "
    rm -rf ~/.local;               cp -r    ../configs/.local                ~ &&         echo -e "[${BLUE}ok${RESET}] Copied .local to ~/.local"
    rm -rf ~/.icons;               cp -r    ../configs/.icons                ~ &&         echo -e "[${BLUE}ok${RESET}] Copied .icons to ~/.icons"
    rm -rf ~/.bin;                 cp -r    ../configs/.bin                  ~ &&         echo -e "[${BLUE}ok${RESET}] Copied .icons to ~/.icons"
    sudo rm -f /etc/issue ; sudo cp -r ../configs/etc/issue /etc && echo -e "[${BLUE}ok${RESET}] Copied issue to /etc/issue"
    sudo rm -f /etc/motd ; sudo cp -r ../configs/etc/motd /etc && echo -e "[${BLUE}ok${RESET}] Copied motd to /etc/motd"

    # Set some files as exacutable 
    chmod +x ~/.config/hypr/scripts/xdg-portal-hyprland && echo -e "[${BLUE}ok${RESET}] '~/.config/hypr/xdg-portal-hyprland' is executable: .wxr-xr-x "
    chmod +x ~/.config/swww/scripts/init_wallpaper && echo -e "[${BLUE}ok${RESET}] '~/config/swww/scripts/init_wallpaper' is executable: .wxr-xr-x "
    chmod +x ~/.config/swww/scripts/change_wallpaper && echo -e "[${BLUE}ok${RESET}] '~/.config/swww/scripts/change_wallpaper' is executable: .wxr-xr-x "
    chmod +x ~/.config/waybar/scripts/waybar-wttr.py && echo -e "[${BLUE}ok${RESET}] '~/.config/waybar/scripts/waybar-wttr.py' is executable: .wxr-xr-x "
    chmod -R +x ~/.config/hypr/scripts
    chmod -R +x ~/.config/swww/scripts
    chmod -R +x ~/.config/wofi/manager

    # Clean out other portals
    echo -e "[${PURPLE}info${RESET}] Cleaning out conflicting xdg portals..."
    $AUR_HELPER -R --noconfirm xdg-desktop-portal-gnome xdg-desktop-portal-gtk >/dev/null 2>&1
}

# Usage: copy_config
# Description: Pulls rose-pine-sddm from my github, applies patches
install_custom_sddm() {
    sudo rm -rf /usr/share/sddm/themes/rose-pine-sddm
    git clone https://github.com/POP303U/rose-pine-sddm ~/rose-pine-sddm >/dev/null 2>&1
    sudo mv ~/rose-pine-sddm /usr/share/sddm/themes/
    sudo cp /usr/lib/sddm/sddm.conf.d/default.conf /etc/sddm.conf

    # use sed for modifying the theme
    sudo sed -i 's|Current=.*|Current=rose-pine-sddm|' /etc/sddm.conf
    sudo sed -i 's|CursorSize=.*|CursorSize=24|' /etc/sddm.conf
    sudo sed -i 's|CursorTheme=.*|CursorTheme=Bibata-Modern-Ice|' /etc/sddm.conf
    echo -e "[${BLUE}ok${RESET}] Installed custom adaptive sddm theme"

    # time to get hacky, dont want to create extra repo so here we areee
    sed -i 's|Background="Backgrounds/cat_leaves.png"|Background="Backgrounds/current"|' /usr/share/sddm/themes/rose-pine-sddm/theme.conf
    sed -i 's|PartialBlur="false"|PartialBlur="true"|' /usr/share/sddm/themes/rose-pine-sddm/theme.conf
    sed -i 's|BlueRadius="0"|BlurRadius="15"|' /usr/share/sddm/themes/rose-pine-sddm/theme.conf

    # making sure sddm uses the correct background
    RICE_CURRENT=$(awk '/rice-current/ {print $NF}' ../configs/.config/material/config)
    WALLPAPER_CURRENT=$(awk '/wallpaper-current/ {print $NF}' ../configs/.config/material/config)
    sudo cp ../configs/.config/swww/walls/$RICE_CURRENT/$WALLPAPER_CURRENT /usr/share/sddm/themes/rose-pine-sddm/Backgrounds/current
}
